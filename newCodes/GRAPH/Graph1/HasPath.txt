#include <iostream>
using namespace std;

bool DFS(int**edges, int n, int s, int e, bool* visited)
{
    if(edges[s][e]==1)
    {
        return true;
    }
 	for(int i=0;i<n;i++)
 	{
        if(edges[s][i]&&!visited[i])
        {
            visited[i] = true;
            bool smallans = DFS(edges,n,i,e,visited);
            if(smallans == true)
            {
                return true;
            }
        }
 	}
    return false;
}

bool hasPath(int**edges, int n, int s, int e)
{
        bool* visited = new bool[n]();
    	visited[s] = true;
        return DFS(edges,n,s,e,visited);
}

int main() {
    int V, E;
    cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to take input and print the output yourself
	 
  */
    int**edges = new int*[V];
    for(int i=0;i<V;i++)
    {
        edges[i] = new int[V];
    }
    
    for(int i=0;i<E;i++)
    {
        int f,s;
        cin>>f>>s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    int start,end;
    cin>>start>>end;
    
    if(hasPath(edges,V,start,end))
    {
        cout<<"true";
    }
    else
    {
        cout<<"false";
    }
    
    
	for(int i=0;i<V;i++)
    {
        delete[] edges[i]; 
    }
    delete[] edges;
  return 0;
}
