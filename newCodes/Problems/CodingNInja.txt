#include<bits/stdc++.h>
using namespace std;


int DFS(char Graph[][MAXN],int i,int j,int N,int M,int visited[][MAXN], char check[])
{
    if(check[0] == '\0')
    {
        return 1;
    }
    
    //visited[make_pair<i,j>] = true;
    visited[i][j] = 1;
    // cout<<Graph[i][j];
    int ans = 0;
    //8 directions
    if(i-1>-1&&j-1>-1&&Graph[i-1][j-1]==check[0]&&!visited[i-1][j-1])
    {
        ans = ans||DFS(Graph,i-1,j-1,N,M,visited,check+1);
    }
    if(i-1>-1&&Graph[i-1][j]==check[0]&&!visited[i-1][j])
    {
        ans = ans||DFS(Graph,i-1,j,N,M,visited,check+1);
    }
    if(i-1>-1&&j+1<M&&Graph[i-1][j+1]==check[0]&&!visited[i-1][j+1])
    {
        ans = ans||DFS(Graph,i-1,j+1,N,M,visited,check+1);
    }
    
    if(j-1>-1&&Graph[i][j-1]==check[0]&&!visited[i][j-1])
    {
        //cout<<endl;
        ans = ans||DFS(Graph,i,j-1,N,M,visited,check+1);
    }
    if(j+1<M&&Graph[i][j+1]==check[0]&&!visited[i][j+1])
    {
        ans = ans||DFS(Graph,i,j+1,N,M,visited,check+1);
    }
    
    if(i+1<N&&j-1>-1&&Graph[i+1][j-1]==check[0]&&!visited[i+1][j-1])
    {
        ans = ans||DFS(Graph,i+1,j-1,N,M,visited,check+1);
    }
    if(i+1<N&&Graph[i+1][j]==check[0]&&!visited[i+1][j])
    {
        ans = ans||DFS(Graph,i+1,j,N,M,visited,check+1);
    }
    if(i+1<N&&j+1<M&&Graph[i+1][j+1]==check[0]&&!visited[i+1][j+1])
    {
        ans = ans||DFS(Graph,i+1,j+1,N,M,visited,check+1);
    }
       visited[i][j] = 0;

    return ans;
}

int solve(char Graph[][MAXN],int N, int M)
{
	// Write your code here.
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<M;j++)
        {
            if(Graph[i][j]=='C')
            {
                int visited[N][MAXN] = {};
                //pair<char,int> check [11] = { {'C',0},{'O',0},{'D',0},{'I',0},{'N',0},{'G',0},{'N',0},{'I',0},{'N',0},{'J',0},{'A',0} };
               	//check[0].second = 1;
                //unordered_map<pair<int,int>,bool> visited;
                char check[] = "CODINGNINJA";//ends with NULL
                int ans =  DFS(Graph,i,j,N,M,visited,check+1);
            	if(ans)
                {
                    return ans;
                }
                cout<<endl;
            }
        }
    }
    return 0;
}