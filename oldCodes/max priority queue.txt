
/***************
 * Following is the main function that er are using internally
 *
 
int main() {
    PriorityQueue pq;
    int choice;
    cin >> choice;
    while(choice != -1) {
        switch(choice) {
            case 1 : // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2 : // getMax
                cout << pq.getMax() << endl;
                break;
            case 3 : // removeMax
                cout << pq.removeMax() << endl;
                break;
            case 4 : // size
                cout << pq.getSize() << endl;
                break;
            case 5 : // isEmpty
                if(pq.isEmpty()) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
            default :
                return 0;
        }
        cin >> choice;
    }
}
*******************/
#include<vector>
class PriorityQueue {
    // Complete this class
    vector<int> pq;
    public:
    
    PriorityQueue(){
        
    }
    int getSize()
    {
        return pq.size();
    }
    bool isEmpty()
    {
        return pq.size()==0;
    }
    void insert(int element)
    {
        pq.push_back(element);
        int ci = pq.size()-1;
        while(ci > 0)
        {
            int pi = (ci - 1)/2;
            if(pq[ci] > pq[pi])
            {
            int k = pq[ci];
            pq[ci] = pq[pi];
            pq[pi] = k;
            }
            else
            {
                break;
            }   
            ci = pi;
        }
    }
    int getMax()
    {
        if(isEmpty())
        {
            return 0;
        }
        return pq[0];
    }
    int removeMax()
    {
        if(pq.empty())
        {
            return 0;
        }
        int removeddata = pq[0];
        pq[0] = pq[pq.size()-1];
        pq.pop_back();
        int pi = 0;
        int cl = (2*pi) + 1;
        int cr = (2*pi)+ 2;
        while(cl < pq.size())
        {
            int maxindex = pi;
            if(pq[cl] > pq[maxindex])
            {
                maxindex = cl;
            }
            if(cr < pq.size() && pq[cr] > pq[maxindex])
             {
                maxindex = cr;
             }
            if( maxindex !=pi)
            {
                 int k = pq[maxindex];
                 pq[maxindex] = pq[pi];
                 pq[pi] = k;
                 pi = maxindex;
                 cl = (2*pi)+ 1;
                 cr = (2*pi)+ 2;
             }
             else
             {
                break;
              }
        }
        return removeddata;
    }
    
};
